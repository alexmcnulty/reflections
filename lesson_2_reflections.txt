Q. What happens when you initialize a repository? Why do you need to do it?

A. You include a .git file. It is  needed to make a git repository.


Q. How is the staging area different from the working directory and the repository? What value do you think it offers?

A. Its a meta platform that temporarily stores the files which are to be commited. One advantage is that you can choose which files from the cwd which youd like to add.	


Q. How can you use the staging area to make sure you have one commit per logical change?

A. Using git status you can look at the changed filesand commit as per logical step.


Q. How do the diagrams help you visualize the branch structure?

A. Having a graph allows you to visualize the order of commits and when branches were made. It can also help identify unreachable commits.


Q. What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

A. Merging two branches adds what was changed in one branch to another based on what the most recent common commit is. The  most recent commmit is used to decide what is to be kept in common.

Q. What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?

A. It shows where conflicts exist in the code andimplements it in your file. It fragments the code into head, the current branch, the most recent commit,  finally the master.


######################################################################################
Some tricks that need to be knoen:
# in general
1.add to staging area
2.commit 

git diff with no comments compares the working directory with the staging
git diff --staged

git log --graph --oneline


# merge master onto other branch, keeping master intact.
git merge master easy-branch

######################################################################################

Commands:

git add  |    Add a file to the staging area
git commit  |    Commit the files from the staging area to the repository 
git status  |    Show which files are in the staging area, and which files from the working directory are not part of the repository    
git diff  |    Git diff without arguments is comparing the working directory with the staging area
git diff --staged  |    Compare the staging area with the repository
git reset --hard  |    Undo all changes! There is no rollback for this, so be carefull!
git checkout master  |    Restore the "Head" to the latest check-in (this will be part of a later lesson/module)
git log --graph --oneline <branch1> <branch2>  |    Show a visual representation of the commit history within different branches
git checkout -b new_branch_name  |    Creates a new branch and do a checkout on this branch in one call instead of git branch new_branch_name and git checkout new_branch_name
git merge branch1 branch2  |    Merge two branches, branch2 get merged into branch1
git branch -d name  |    Remove the branch with the specified name
git show commitId  |    Show the changes made in this commit compared to the previous version. This is working even after merging.
